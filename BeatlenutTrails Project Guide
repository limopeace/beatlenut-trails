# Beatlenuts-GR Project Guide

## Project Overview

Beatlenuts-GR is a Node.js Express API application designed with a modular architecture following MVC patterns. The application provides RESTful API endpoints and is structured for easy maintenance and scalability.

## Core Technologies

- **Backend**: Node.js with Express
- **Testing**: Jest with Supertest
- **Linting**: ESLint and Prettier
- **Documentation**: JSDoc, Markdown files

## Architecture

The application follows a modular architecture with:

- **Controllers**: Handle HTTP requests and responses
- **Services**: Contain business logic
- **Models**: Define data structures and validation
- **Routes**: Define API endpoints
- **Middleware**: Custom Express middleware
- **Utils**: Helper functions
- **Config**: Application configuration

## Getting Started

### Prerequisites

- Node.js (v14 or higher)
- npm (v6 or higher)

### Installation

```bash
# Clone the repository
git clone <repository-url>

# Install dependencies
npm install
```

### Running the Application

```bash
# Start the server
npm start

# Start with auto-restart (development mode)
npm run dev
```

## Development Workflow

### Code Organization

Follow the established directory structure:

```
beatlenuts-gr/
├── config/             # Configuration files
├── src/                # Source code
│   ├── controllers/    # Request handlers
│   ├── middleware/     # Express middleware
│   ├── models/         # Data models
│   ├── routes/         # API routes
│   ├── services/       # Business logic
│   ├── utils/          # Utility functions
│   └── index.js        # Application entry point
├── tests/              # Test files
├── docs/               # Documentation
```

### Adding New Features

1. Define the API endpoint in a route file
2. Create a controller to handle the request
3. Implement business logic in a service
4. Create a model if needed
5. Write tests for all components
6. Update documentation

### Testing

```bash
# Run all tests
npm test

# Run specific test file
npx jest tests/path/to/test.js

# Run tests with coverage
npx jest --coverage
```

### Code Quality

```bash
# Lint code
npm run lint

# Format code
npm run format
```

## Best Practices

### API Design

- Follow RESTful conventions
- Use proper HTTP methods (GET, POST, PUT, DELETE)
- Return appropriate status codes
- Validate request input
- Handle errors gracefully

### Error Handling

- Use try/catch blocks in async functions
- Pass errors to Express error middleware
- Add descriptive error messages
- Log errors with adequate context

### Testing

- Write unit tests for services and utilities
- Write integration tests for API endpoints
- Aim for high code coverage
- Test both successful and error scenarios

### Documentation

- Add JSDoc comments to functions and classes
- Keep API documentation up to date
- Document environment variables and configuration
- Include examples for API usage

### Security

- Validate and sanitize all inputs
- Use environment variables for secrets
- Implement rate limiting for public endpoints
- Keep dependencies updated